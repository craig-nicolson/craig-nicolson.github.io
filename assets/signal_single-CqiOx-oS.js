import{r as D,c as W}from"./overlayControls-CFepzlKg.js";/* empty css              */import{S as j}from"./signalBatchRenderer-BsMJnxhq.js";import{h as x,d as $,e as q,M as N,B as _}from"./color-D1U2lwmM.js";import"./signalSquare-CnPgryvO.js";const n={"Signal Fade Rate":{value:1.2,type:"range",min:.1,max:3,step:.1,label:"Signal Fade Rate",section:"Signal Display"},"ECG Trace Width":{value:4,type:"range",min:.5,max:16,step:.1,label:"Trace Width",section:"ECG Trace"},"ECG Head Size":{value:10,type:"range",min:2,max:28,step:.5,label:"Head Dot Size",section:"ECG Trace"},"ECG Trail Life":{value:65,type:"range",min:5,max:200,step:1,label:"Trail Life (%)",section:"ECG Trace"},"ECG Trace Color":{value:"#00ff6a",type:"color",label:"Trace Color",section:"ECG Trace"},"ECG Grid Size":{value:100,type:"range",min:20,max:160,step:2,label:"Grid Size",section:"ECG Grid"},"ECG Show Outer Box":{value:!0,type:"checkbox",label:"Show Outer Box",section:"ECG Grid"},"ECG Show Grid Lines":{value:!0,type:"checkbox",label:"Show Grid Lines",section:"ECG Grid"},"Internal: ECG Sample Resolution":3200,"Internal: ECG Viewport Horizontal Padding":.02,"Internal: ECG Viewport Vertical Padding":.02,"Internal: ECG Heart Rate Drift":!1,"Internal: ECG Show Grid":!0,"Internal: ECG Grid Color":"#00ff6a","Internal: ECG Grid Color Major":"#00ff6a","Internal: ECG Grid Color Panel":"#00ff6a","Internal: ECG Show Grid Background":!0,"Internal: ECG Grid Gap Percent":0,"Internal: Signal Secondary Heart Rate":26,"Internal: Signal Mode":"single","Internal: Signal Rate 2 BPM":26,"Internal: Initial Heart Rate":62,"Internal: Signal A Offsets":[.1,.2,.3,.4],"Internal: Signal B Offset":50,"Internal: Signal CF Offsets":[.15,.3,.45,.6],"Internal: Signal CF Individual Offsets":[150,300,450,600]};D("config",n,{onChange:(e,t,o)=>{if(e==="Signal Fade Rate"){a&&a.setFadeRate(t);return}if(["ECG Trace Width","ECG Head Size","ECG Trail Life","ECG Overlap","ECG Trace Color","ECG Grid Size","ECG Show Outer Box","ECG Show Grid Lines"].includes(e)){if(!r)return;const i={};e==="ECG Trace Width"?i.lineWidth=t:e==="ECG Head Size"?i.headDotRadius=t:e==="ECG Trail Life"?i.trailLifePercent=t:e==="ECG Trace Color"?(i.colorCore=x(t,.95),r._colorCore=new Float32Array(r.cfg.colorCore)):(e==="ECG Grid Size"||e==="ECG Show Outer Box"||e==="ECG Show Grid Lines")&&G&&G(),Object.keys(i).length>0&&r.updateConfig(i);return}}});function J(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}const h=document.getElementById("single-container"),y=document.getElementById("single-pulses"),O=document.getElementById("ecg-grid-canvas"),C=document.getElementById("ecg-trace-canvas"),p=document.getElementById("ecg-bpm"),b=document.getElementById("ecg-beats"),d=document.getElementById("ecg-hr"),w=document.getElementById("ecg-val-hr");let a=null,l={a1:!0,a:!1,b:!1,c:!1,d:!1,e:!1,f:!1},s={a1:0,a:0,b:0,c:0,d:0,e:0,f:0},r=null,g=null,G=null;function Q(){!C||!O||q({sampleResolution:n["Internal: ECG Sample Resolution"]}).then(()=>{requestAnimationFrame(()=>{const t=C.parentElement.getBoundingClientRect(),o={rows:1,cols:1,heartRateMode:"manual",manualHeartRate:n["Internal: Initial Heart Rate"],trailLifePercent:n["ECG Trail Life"].value,lineWidth:n["ECG Trace Width"].value,headDotRadius:n["ECG Head Size"].value,colorCore:x(n["ECG Trace Color"].value,.95),gridSize:n["ECG Grid Size"].value,showGrid:n["Internal: ECG Show Grid"],gridColor:n["Internal: ECG Grid Color"],renderWidth:t.width,renderHeight:t.height,viewportHorizontalPadding:n["Internal: ECG Viewport Horizontal Padding"],viewportVerticalPadding:n["Internal: ECG Viewport Vertical Padding"],heartRateDrift:n["Internal: ECG Heart Rate Drift"]};r=new N(C,o),g=new _(r),g.start(),z(),r.traces[0],r.setHeartRateMode("manual"),r.setManualHeartRate(n["Internal: Initial Heart Rate"]),a&&a.setHeartRate1(n["Internal: Initial Heart Rate"]),setTimeout(()=>{const c=n["Internal: Initial Heart Rate"];w&&(w.textContent=c),p&&(p.textContent=c),d&&(d.value=c)},50),U(),X()})})}function z(){$(O,{rows:1,cols:1,gridSize:n["ECG Grid Size"].value,gridColorMajor:n["Internal: ECG Grid Color Major"],gridColorPanel:n["Internal: ECG Grid Color Panel"],showGridOuterBox:n["ECG Show Outer Box"].value,showGridLines:n["ECG Show Grid Lines"].value,showGridBackground:n["Internal: ECG Show Grid Background"],gridGapPercent:n["Internal: ECG Grid Gap Percent"],viewportHorizontalPadding:n["Internal: ECG Viewport Horizontal Padding"],viewportVerticalPadding:n["Internal: ECG Viewport Vertical Padding"]})}G=z;function U(){window.addEventListener("resize",H),window.ResizeObserver&&new ResizeObserver(H).observe(C.parentElement||C)}function H(){if(!r)return;const e=C.parentElement.getBoundingClientRect();r.updateDimensions(e.width,e.height),G&&G()}function X(){d&&(d.value=n["Internal: Initial Heart Rate"],d.addEventListener("input",()=>{const e=+d.value;r&&(r.setManualHeartRate(e),r.setHeartRateMode("manual")),a&&a.setHeartRate1(e),w&&(w.textContent=e),p&&(p.textContent=e),ne()}))}function Y(){Object.keys(l).forEach(e=>{const t=document.getElementById(`counter-${e}`);if(t){const o=t.parentElement;M(o,e)}}),Object.keys(l).forEach(e=>{const t=document.getElementById(`counter-${e}`);if(t){const o=t.parentElement;o.addEventListener("click",()=>Z(e,o))}})}function Z(e,t){l[e]=!l[e],M(t,e),a&&a.setActivityLevels({[e]:l[e]?1:0})}function M(e,t){const o=l[t],c=e.querySelector(".signal-type-counter"),i=e.querySelector(".signal-type-label");o?(e.className="signal-type-item active",c.style.color="var(--accent, #00ff6a)",c.style.textShadow="0 0 10px rgba(0,255,106,0.5)",i.style.color="var(--accent, #00ff6a)"):(e.className="signal-type-item inactive",c.style.color="var(--text-dim, #666)",c.style.textShadow="none",i.style.color="var(--text-dim, #666)")}function K(){const e=h.getBoundingClientRect();if(a=new j(h,{mode:n["Internal: Signal Mode"],heartRate1:n["Internal: Initial Heart Rate"],heartRate2:n["Internal: Signal Secondary Heart Rate"],fadeRate:n["Signal Fade Rate"].value,renderWidth:e.width,renderHeight:e.height}),a.setActivityLevels({a1:1,a:0,b:0,c:0,d:0,e:0,f:0}),te(),Q(),Y(),ee(),a&&r){const t=n["Internal: Initial Heart Rate"];a.setHeartRate1(t),r.setManualHeartRate(t),r.setHeartRateMode("manual")}a.animate(),setTimeout(()=>{const t=+d.value||n["Internal: Initial Heart Rate"];a&&a.setHeartRate1(t)},100),W({title:"Signal Single Configuration"})}function ee(){const e=()=>{a&&r&&g?(I(),a.animate(),g&&!g.isRunning&&g.start(),v()):setTimeout(e,50)};e()}function te(){window.addEventListener("resize",B),window.ResizeObserver&&new ResizeObserver(B).observe(h)}function B(){if(!a)return;const e=h.getBoundingClientRect();a.updateDimensions(e.width,e.height)}let S=null;function I(){S=performance.now()}function u(e,t){const o=e/6e4;return Math.floor(t*o)}function ne(){if(S&&I(),r){const e=+d.value;r.setManualHeartRate(e),r.setHeartRateMode("manual")}}function T(){I(),Object.keys(s).forEach(e=>{s[e]=0}),v()}document.addEventListener("keydown",e=>{(e.key==="r"||e.key==="R")&&T()});window.addEventListener("message",e=>{e.data==="reset"&&T()});document.addEventListener("keydown",e=>{e.ctrlKey&&(e.key==="ArrowLeft"||e.key==="ArrowRight")&&window.parent.postMessage({type:"keydown",key:e.key,ctrlKey:e.ctrlKey},"*")});function v(){if(!a||!S)return;const t=performance.now()-S,o=+d.value,c=u(o,t);b&&(b.textContent=c);const i=o,P=n["Internal: Signal Rate 2 BPM"],L=l.a1?u(i,t):0;let R=0;l.a&&n["Internal: Signal A Offsets"].forEach(f=>{const V=Math.max(0,t-f*1e3);R+=u(i,V)});const k=R,A=l.b?u(P,Math.max(0,t-n["Internal: Signal B Offset"])):0;n["Internal: Signal CF Offsets"];const m=n["Internal: Signal CF Individual Offsets"];s.a1=L,s.a=k,s.b=A,s.c=l.c?u(i,Math.max(0,t-m[0])):0,s.d=l.d?u(i,Math.max(0,t-m[1])):0,s.e=l.e?u(i,Math.max(0,t-m[2])):0,s.f=l.f?u(i,Math.max(0,t-m[3])):0,Object.keys(s).forEach(E=>{const f=document.getElementById(`counter-${E}`);f&&(f.textContent=s[E])});const F=Object.values(s).reduce((E,f)=>E+f,0);y&&(y.textContent=J(F)),requestAnimationFrame(v)}document.addEventListener("DOMContentLoaded",()=>{try{const e=document.getElementById("ecg-hr");e&&(e.value=n["Internal: Initial Heart Rate"]),K(),window.signalSingleInstance={renderer:a}}catch(e){console.error("Failed to initialize SignalSingle:",e),ae(e)}});function ae(e){const t=document.createElement("div");Object.assign(t.style,{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",background:"rgba(255, 0, 0, 0.9)",color:"white",padding:"20px",borderRadius:"10px",fontFamily:"monospace",maxWidth:"80vw",maxHeight:"80vh",overflow:"auto"}),t.innerHTML=`
    <h2>Initialization Error</h2>
    <pre style="white-space: pre-wrap; word-wrap: break-word;">${e.message}</pre>
    <pre style="white-space: pre-wrap; word-wrap: break-word;">${e.stack}</pre>
  `,document.body.appendChild(t)}
